{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","height","weight","className","src","alt","width","toFixed","CardList","pokemonData","map","pokemon","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","pokemons","pokemonInfo","fetch","then","response","json","data","results","pokeData","url","rest","filteredPokemons","filter","toLowerCase","includes","sort","a","b","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0c2f5c28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, id,  height, weight}) => {\r\n    return(\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} alt='pokemon' height='200px' width='200px' />\r\n            <h2>{ name }</h2>\r\n            <p>DexNumber: { id }</p>\r\n            <p>height: { (height*0.1).toFixed(2) }(m)</p>\r\n            <p>weight: { (weight*0.1).toFixed(2) }(kg)</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({pokemonData}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                pokemonData.map((pokemon,i) => {\r\n                    return(\r\n                        <Card\r\n                            key  = {i}\r\n                            id   = {pokemonData[i].id}\r\n                            name = {pokemonData[i].name}\r\n                            height = {pokemonData[i].height}\r\n                            weight = {pokemonData[i].weight}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search pokemon'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Sorry. Wait for you....</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox';\nimport Scroll from '../component/Scroll';\nimport ErrorBoundry from '../component/ErrorBoundry';\nimport './App.css';\nclass App extends Component {\n  constructor() {\n        super();\n        this.state = {\n            pokemons: [],\n            pokemonInfo: [],\n            searchfield: ''  \n        }\n    }\n\n    componentDidMount() {\n        let url = 'https://pokeapi.co/api/v2/pokemon?limit=151';\n        fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            this.setState({pokemons: data.results},() =>{\n                this.state.pokemons.map(pokeData => {\n                    fetch(pokeData.url)\n                    .then(response => response.json())\n                    .then(data => {\n                        this.setState(rest => ({pokemonInfo: [...rest.pokemonInfo,data]}))\n                    })\n                    return this.state.pokemonInfo\n                })\n            })\n        })\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    render() {\n        const {pokemons,pokemonInfo, searchfield} = this.state;\n        const filteredPokemons = pokemonInfo.filter( pokemon => {\n            return pokemon.name.toLowerCase().includes(searchfield.toLowerCase())\n        }).sort((a,b) => a.id - b.id);\n\n        return !pokemons.length ?\n        <h1>Loding....</h1> :\n        (\n            <div className=\"tc\">\n                <h1 className='f2'>PokeDex</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList pokemonData = {filteredPokemons}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}